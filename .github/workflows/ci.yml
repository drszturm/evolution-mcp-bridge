name: CI Pipeline

on:
  push:
    branches: [ "main", "develop", "stage" ]
  pull_request:
    branches: [ "main", "develop", "stage" ]

jobs:
  lint-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Run Black formatting check
        run: black --check --diff .
        
      - name: Run Ruff linting
        run: ruff check .
        
      - name: Run Pylint
        run: pylint main.py models.py config.py evolution_client.py mcp_client.py cache.py tests/
        
      - name: Run MyPy type checking
        run: mypy .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v
        env:
          REDIS_URL: redis://localhost:6379
          CACHE_ENABLED: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r . -f html -o bandit-report.html || true
          
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-format, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -t evolution-mcp-bridge:latest .
          
      - name: Test Docker image
        run: |
          docker run --rm evolution-mcp-bridge:latest python -c "import sys; print('Python OK')"